(function() {var type_impls = {
"mina_curves":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    x: &lt;P as ModelParameters&gt;::BaseField,\n    y: &lt;P as ModelParameters&gt;::BaseField,\n    infinity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>\n) -&gt; GroupAffine&lt;P&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.scale_by_cofactor\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">scale_by_cofactor</a>(&amp;self) -&gt; GroupProjective&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Multiply <code>self</code> by the cofactor of the curve, <code>P::COFACTOR</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_point_from_x\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_point_from_x</a>(\n    x: &lt;P as ModelParameters&gt;::BaseField,\n    greatest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GroupAffine&lt;P&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to construct an affine point given an x-coordinate. The\npoint is not guaranteed to be in the prime order subgroup.</p>\n<p>If and only if <code>greatest</code> is set will the lexicographically\nlargest y-coordinate be selected.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_on_curve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_on_curve</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if <code>self</code> is a valid point on the curve.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_correct_subgroup_assuming_on_curve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_in_correct_subgroup_assuming_on_curve</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if <code>self</code> is in the subgroup having order that equaling that of\n<code>P::ScalarField</code>.</p>\n</div></details></div></details>",0,"mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<section id=\"impl-Eq-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Eq-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section>","Eq","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBytes-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-ToBytes-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; ToBytes for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code>.</div></details></div></details>","ToBytes","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CanonicalDeserialize-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-CanonicalDeserialize-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; CanonicalDeserialize for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>Self</code> from <code>reader</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_uncompressed\" class=\"method trait-impl\"><a href=\"#method.deserialize_uncompressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_uncompressed</a>&lt;R&gt;(\n    reader: R\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>Self</code> from <code>reader</code> without compression.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_unchecked\" class=\"method trait-impl\"><a href=\"#method.deserialize_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_unchecked</a>&lt;R&gt;(\n    reader: R\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>self</code> from <code>reader</code> without compression, and without performing\nvalidity checks. Should be used <em>only</em> when the input is trusted.</div></details></div></details>","CanonicalDeserialize","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AffineCurve-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-AffineCurve-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; AffineCurve for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.COFACTOR\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.COFACTOR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">COFACTOR</a>: &amp;'static [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>] = P::COFACTOR</h4></section><section id=\"associatedtype.BaseField\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.BaseField\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">BaseField</a> = &lt;P as ModelParameters&gt;::BaseField</h4></section><section id=\"associatedtype.ScalarField\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ScalarField\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ScalarField</a> = &lt;P as ModelParameters&gt;::ScalarField</h4></section><section id=\"associatedtype.Projective\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Projective\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Projective</a> = GroupProjective&lt;P&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.prime_subgroup_generator\" class=\"method trait-impl\"><a href=\"#method.prime_subgroup_generator\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">prime_subgroup_generator</a>() -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Returns a fixed generator of unknown exponent.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_random_bytes\" class=\"method trait-impl\"><a href=\"#method.from_random_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_random_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GroupAffine&lt;P&gt;&gt;</h4></section></summary><div class='docblock'>Returns a group element if the set of bytes forms a valid group element,\notherwise returns None. This function is primarily intended for sampling\nrandom group elements from a hash-function or RNG output.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul</a>&lt;S&gt;(&amp;self, by: S) -&gt; GroupProjective&lt;P&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;&lt;&lt;GroupAffine&lt;P&gt; as AffineCurve&gt;::ScalarField as PrimeField&gt;::BigInt&gt;,</div></h4></section></summary><div class='docblock'>Performs scalar multiplication of this element with mixed addition.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_by_cofactor_to_projective\" class=\"method trait-impl\"><a href=\"#method.mul_by_cofactor_to_projective\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul_by_cofactor_to_projective</a>(\n    &amp;self\n) -&gt; &lt;GroupAffine&lt;P&gt; as AffineCurve&gt;::Projective</h4></section></summary><div class='docblock'>Multiply this element by the cofactor and output the\nresulting projective element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_by_cofactor_inv\" class=\"method trait-impl\"><a href=\"#method.mul_by_cofactor_inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul_by_cofactor_inv</a>(&amp;self) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Multiply this element by the inverse of the cofactor in\n<code>Self::ScalarField</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_projective\" class=\"method trait-impl\"><a href=\"#method.into_projective\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_projective</a>(&amp;self) -&gt; Self::Projective</h4></section></summary><div class='docblock'>Converts self into the projective representation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_by_cofactor\" class=\"method trait-impl\"><a href=\"#method.mul_by_cofactor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul_by_cofactor</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Multiply this element by the cofactor.</div></details></div></details>","AffineCurve","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Clone-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Sum-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; GroupAffine&lt;P&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = GroupAffine&lt;P&gt;&gt;,</div></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Sum%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;&amp;'a GroupAffine&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; GroupAffine&lt;P&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a GroupAffine&lt;P&gt;&gt;,</div></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum<&'a GroupAffine<P>>","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Neg-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>If <code>self.is_zero()</code>, returns <code>self</code> (<code>== Self::zero()</code>).\nElse, returns <code>(x, -y)</code>, where <code>self = (x, y)</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Neg","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToConstraintField%3CConstraintF%3E-for-GroupAffine%3CM%3E\" class=\"impl\"><a href=\"#impl-ToConstraintField%3CConstraintF%3E-for-GroupAffine%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M, ConstraintF&gt; ToConstraintField&lt;ConstraintF&gt; for GroupAffine&lt;M&gt;<div class=\"where\">where\n    M: SWModelParameters,\n    ConstraintF: Field,\n    &lt;M as ModelParameters&gt;::BaseField: ToConstraintField&lt;ConstraintF&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.to_field_elements\" class=\"method trait-impl\"><a href=\"#method.to_field_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_field_elements</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ConstraintF&gt;&gt;</h4></section></div></details>","ToConstraintField<ConstraintF>","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytes-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-FromBytes-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; FromBytes for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>Self</code> from <code>reader</code>.</div></details></div></details>","FromBytes","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Debug-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, __f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-From%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;GroupProjective&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(p: GroupProjective&lt;P&gt;) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<GroupProjective<P>>","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;GroupProjective&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;GroupProjective&lt;P&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<GroupProjective<P>>","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;GroupAffine&lt;P&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Zero-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the point at infinity. Note that in affine coordinates,\nthe point at infinity does not lie on the curve, and this is indicated\nby setting the <code>infinity</code> flag to true.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if <code>self</code> is the point at infinity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#23\">source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","Zero","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<section id=\"impl-Copy-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Copy-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section>","Copy","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Display-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Default-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CanonicalSerialize-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-CanonicalSerialize-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; CanonicalSerialize for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code>.\nIt is left up to a particular type for how it strikes the\nserialization efficiency vs compression tradeoff.\nFor standard types (e.g. <code>bool</code>, lengths, etc.) typically an uncompressed\nform is used, whereas for algebraic types compressed forms are used. <a>Read more</a></div></details><section id=\"method.serialized_size\" class=\"method trait-impl\"><a href=\"#method.serialized_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialized_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_uncompressed\" class=\"method trait-impl\"><a href=\"#method.serialize_uncompressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_uncompressed</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code> without compression.</div></details><section id=\"method.uncompressed_size\" class=\"method trait-impl\"><a href=\"#method.uncompressed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">uncompressed_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_unchecked\" class=\"method trait-impl\"><a href=\"#method.serialize_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_unchecked</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code> without compression, and without\nperforming validity checks. Should be used <em>only</em> when there is no\ndanger of adversarial manipulation of the output.</div></details></div></details>","CanonicalSerialize","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Hash-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__HP&gt;(&amp;self, __state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __HP</a>)<div class=\"where\">where\n    __HP: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Zeroize for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Zero out this object from memory using Rust intrinsics which ensure the\nzeroization operation is not “optimized away” by the compiler.</div></details></div></details>","Zeroize","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Add-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: GroupAffine&lt;P&gt;) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-AddAssign%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;'a GroupAffine&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;'a GroupAffine&lt;P&gt;)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&'a GroupAffine<P>>","mina_curves::pasta::curves::pallas::Pallas","mina_curves::pasta::curves::pallas::LegacyPallas","mina_curves::pasta::curves::vesta::Vesta","mina_curves::pasta::curves::vesta::LegacyVesta"]],
"mina_signer":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    x: &lt;P as ModelParameters&gt;::BaseField,\n    y: &lt;P as ModelParameters&gt;::BaseField,\n    infinity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>\n) -&gt; GroupAffine&lt;P&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.scale_by_cofactor\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">scale_by_cofactor</a>(&amp;self) -&gt; GroupProjective&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Multiply <code>self</code> by the cofactor of the curve, <code>P::COFACTOR</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_point_from_x\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_point_from_x</a>(\n    x: &lt;P as ModelParameters&gt;::BaseField,\n    greatest: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GroupAffine&lt;P&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to construct an affine point given an x-coordinate. The\npoint is not guaranteed to be in the prime order subgroup.</p>\n<p>If and only if <code>greatest</code> is set will the lexicographically\nlargest y-coordinate be selected.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_on_curve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_on_curve</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if <code>self</code> is a valid point on the curve.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_in_correct_subgroup_assuming_on_curve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_in_correct_subgroup_assuming_on_curve</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if <code>self</code> is in the subgroup having order that equaling that of\n<code>P::ScalarField</code>.</p>\n</div></details></div></details>",0,"mina_signer::CurvePoint"],["<section id=\"impl-Eq-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Eq-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section>","Eq","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToBytes-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-ToBytes-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; ToBytes for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">write</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code>.</div></details></div></details>","ToBytes","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CanonicalDeserialize-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-CanonicalDeserialize-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; CanonicalDeserialize for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>Self</code> from <code>reader</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_uncompressed\" class=\"method trait-impl\"><a href=\"#method.deserialize_uncompressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_uncompressed</a>&lt;R&gt;(\n    reader: R\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>Self</code> from <code>reader</code> without compression.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize_unchecked\" class=\"method trait-impl\"><a href=\"#method.deserialize_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize_unchecked</a>&lt;R&gt;(\n    reader: R\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, SerializationError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>self</code> from <code>reader</code> without compression, and without performing\nvalidity checks. Should be used <em>only</em> when the input is trusted.</div></details></div></details>","CanonicalDeserialize","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AffineCurve-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-AffineCurve-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; AffineCurve for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.COFACTOR\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.COFACTOR\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a class=\"constant\">COFACTOR</a>: &amp;'static [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>] = P::COFACTOR</h4></section><section id=\"associatedtype.BaseField\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.BaseField\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">BaseField</a> = &lt;P as ModelParameters&gt;::BaseField</h4></section><section id=\"associatedtype.ScalarField\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ScalarField\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">ScalarField</a> = &lt;P as ModelParameters&gt;::ScalarField</h4></section><section id=\"associatedtype.Projective\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Projective\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Projective</a> = GroupProjective&lt;P&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.prime_subgroup_generator\" class=\"method trait-impl\"><a href=\"#method.prime_subgroup_generator\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">prime_subgroup_generator</a>() -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Returns a fixed generator of unknown exponent.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_random_bytes\" class=\"method trait-impl\"><a href=\"#method.from_random_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">from_random_bytes</a>(bytes: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;GroupAffine&lt;P&gt;&gt;</h4></section></summary><div class='docblock'>Returns a group element if the set of bytes forms a valid group element,\notherwise returns None. This function is primarily intended for sampling\nrandom group elements from a hash-function or RNG output.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul</a>&lt;S&gt;(&amp;self, by: S) -&gt; GroupProjective&lt;P&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;&lt;&lt;GroupAffine&lt;P&gt; as AffineCurve&gt;::ScalarField as PrimeField&gt;::BigInt&gt;,</div></h4></section></summary><div class='docblock'>Performs scalar multiplication of this element with mixed addition.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_by_cofactor_to_projective\" class=\"method trait-impl\"><a href=\"#method.mul_by_cofactor_to_projective\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul_by_cofactor_to_projective</a>(\n    &amp;self\n) -&gt; &lt;GroupAffine&lt;P&gt; as AffineCurve&gt;::Projective</h4></section></summary><div class='docblock'>Multiply this element by the cofactor and output the\nresulting projective element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_by_cofactor_inv\" class=\"method trait-impl\"><a href=\"#method.mul_by_cofactor_inv\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul_by_cofactor_inv</a>(&amp;self) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Multiply this element by the inverse of the cofactor in\n<code>Self::ScalarField</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_projective\" class=\"method trait-impl\"><a href=\"#method.into_projective\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">into_projective</a>(&amp;self) -&gt; Self::Projective</h4></section></summary><div class='docblock'>Converts self into the projective representation.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_by_cofactor\" class=\"method trait-impl\"><a href=\"#method.mul_by_cofactor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">mul_by_cofactor</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Multiply this element by the cofactor.</div></details></div></details>","AffineCurve","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Clone-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Sum-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; GroupAffine&lt;P&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = GroupAffine&lt;P&gt;&gt;,</div></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Sum%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html\" title=\"trait core::iter::traits::accum::Sum\">Sum</a>&lt;&amp;'a GroupAffine&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/iter/traits/accum/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I&gt;(iter: I) -&gt; GroupAffine&lt;P&gt;<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = &amp;'a GroupAffine&lt;P&gt;&gt;,</div></h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum<&'a GroupAffine<P>>","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Neg-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html\" title=\"trait core::ops::arith::Neg\">Neg</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>If <code>self.is_zero()</code>, returns <code>self</code> (<code>== Self::zero()</code>).\nElse, returns <code>(x, -y)</code>, where <code>self = (x, y)</code>.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details></div></details>","Neg","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ToConstraintField%3CConstraintF%3E-for-GroupAffine%3CM%3E\" class=\"impl\"><a href=\"#impl-ToConstraintField%3CConstraintF%3E-for-GroupAffine%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;M, ConstraintF&gt; ToConstraintField&lt;ConstraintF&gt; for GroupAffine&lt;M&gt;<div class=\"where\">where\n    M: SWModelParameters,\n    ConstraintF: Field,\n    &lt;M as ModelParameters&gt;::BaseField: ToConstraintField&lt;ConstraintF&gt;,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.to_field_elements\" class=\"method trait-impl\"><a href=\"#method.to_field_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">to_field_elements</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;ConstraintF&gt;&gt;</h4></section></div></details>","ToConstraintField<ConstraintF>","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromBytes-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-FromBytes-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; FromBytes for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">read</a>&lt;R&gt;(reader: R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GroupAffine&lt;P&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Reads <code>Self</code> from <code>reader</code>.</div></details></div></details>","FromBytes","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Debug-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, __f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-From%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;GroupProjective&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(p: GroupProjective&lt;P&gt;) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<GroupProjective<P>>","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CGroupProjective%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;GroupProjective&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;GroupProjective&lt;P&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<GroupProjective<P>>","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;GroupAffine&lt;P&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zero-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Zero-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html\" title=\"trait num_traits::identities::Zero\">Zero</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.zero\" class=\"fn\">zero</a>() -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the point at infinity. Note that in affine coordinates,\nthe point at infinity does not lie on the curve, and this is indicated\nby setting the <code>infinity</code> flag to true.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_zero\" class=\"method trait-impl\"><a href=\"#method.is_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#tymethod.is_zero\" class=\"fn\">is_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if <code>self</code> is the point at infinity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_zero\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://docs.rs/num-traits/0.2/src/num_traits/identities.rs.html#23\">source</a><a href=\"#method.set_zero\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/num-traits/0.2/num_traits/identities/trait.Zero.html#method.set_zero\" class=\"fn\">set_zero</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.</div></details></div></details>","Zero","mina_signer::CurvePoint"],["<section id=\"impl-Copy-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Copy-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section>","Copy","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Display-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Default-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-CanonicalSerialize-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-CanonicalSerialize-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; CanonicalSerialize for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code>.\nIt is left up to a particular type for how it strikes the\nserialization efficiency vs compression tradeoff.\nFor standard types (e.g. <code>bool</code>, lengths, etc.) typically an uncompressed\nform is used, whereas for algebraic types compressed forms are used. <a>Read more</a></div></details><section id=\"method.serialized_size\" class=\"method trait-impl\"><a href=\"#method.serialized_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialized_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_uncompressed\" class=\"method trait-impl\"><a href=\"#method.serialize_uncompressed\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_uncompressed</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code> without compression.</div></details><section id=\"method.uncompressed_size\" class=\"method trait-impl\"><a href=\"#method.uncompressed_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">uncompressed_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize_unchecked\" class=\"method trait-impl\"><a href=\"#method.serialize_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize_unchecked</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SerializationError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> into <code>writer</code> without compression, and without\nperforming validity checks. Should be used <em>only</em> when there is no\ndanger of adversarial manipulation of the output.</div></details></div></details>","CanonicalSerialize","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Hash-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;__HP&gt;(&amp;self, __state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut __HP</a>)<div class=\"where\">where\n    __HP: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/nightly/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Zeroize-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Zeroize-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; Zeroize for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.zeroize\" class=\"method trait-impl\"><a href=\"#method.zeroize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">zeroize</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Zero out this object from memory using Rust intrinsics which ensure the\nzeroization operation is not “optimized away” by the compiler.</div></details></div></details>","Zeroize","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-Add-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a> for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: GroupAffine&lt;P&gt;) -&gt; GroupAffine&lt;P&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","mina_signer::CurvePoint"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"impl\"><a href=\"#impl-AddAssign%3C%26GroupAffine%3CP%3E%3E-for-GroupAffine%3CP%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, P&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html\" title=\"trait core::ops::arith::AddAssign\">AddAssign</a>&lt;&amp;'a GroupAffine&lt;P&gt;&gt; for GroupAffine&lt;P&gt;<div class=\"where\">where\n    P: SWModelParameters,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;'a GroupAffine&lt;P&gt;)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/arith/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&'a GroupAffine<P>>","mina_signer::CurvePoint"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()