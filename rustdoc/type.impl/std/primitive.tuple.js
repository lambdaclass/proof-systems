(function() {var type_impls = {
"kimchi":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SnarkyType%3CF%3E-for-(T1,+T2)\" class=\"impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#132-189\">source</a><a href=\"#impl-SnarkyType%3CF%3E-for-(T1,+T2)\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;F, T1, T2&gt; <a class=\"trait\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html\" title=\"trait kimchi::snarky::snarky_type::SnarkyType\">SnarkyType</a>&lt;F&gt; for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(T1, T2)</a><div class=\"where\">where\n    F: PrimeField,\n    T1: <a class=\"trait\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html\" title=\"trait kimchi::snarky::snarky_type::SnarkyType\">SnarkyType</a>&lt;F&gt;,\n    T2: <a class=\"trait\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html\" title=\"trait kimchi::snarky::snarky_type::SnarkyType\">SnarkyType</a>&lt;F&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Auxiliary\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Auxiliary\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" class=\"associatedtype\">Auxiliary</a> = (&lt;T1 as <a class=\"trait\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html\" title=\"trait kimchi::snarky::snarky_type::SnarkyType\">SnarkyType</a>&lt;F&gt;&gt;::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" title=\"type kimchi::snarky::snarky_type::SnarkyType::Auxiliary\">Auxiliary</a>, &lt;T2 as <a class=\"trait\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html\" title=\"trait kimchi::snarky::snarky_type::SnarkyType\">SnarkyType</a>&lt;F&gt;&gt;::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" title=\"type kimchi::snarky::snarky_type::SnarkyType::Auxiliary\">Auxiliary</a>)</h4></section></summary><div class='docblock'>Some ‘out-of-circuit’ data, which is carried as part of Self.\nThis data isn’t encoded as CVars in the circuit, since the data may be large (e.g. a sparse merkle tree),\nor may only be used by witness computations / for debugging.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.OutOfCircuit\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.OutOfCircuit\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.OutOfCircuit\" class=\"associatedtype\">OutOfCircuit</a> = (&lt;T1 as <a class=\"trait\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html\" title=\"trait kimchi::snarky::snarky_type::SnarkyType\">SnarkyType</a>&lt;F&gt;&gt;::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.OutOfCircuit\" title=\"type kimchi::snarky::snarky_type::SnarkyType::OutOfCircuit\">OutOfCircuit</a>, &lt;T2 as <a class=\"trait\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html\" title=\"trait kimchi::snarky::snarky_type::SnarkyType\">SnarkyType</a>&lt;F&gt;&gt;::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.OutOfCircuit\" title=\"type kimchi::snarky::snarky_type::SnarkyType::OutOfCircuit\">OutOfCircuit</a>)</h4></section></summary><div class='docblock'>The equivalent “out-of-circuit” type.\nFor example, the <a href=\"kimchi/snarky/boolean/struct.Boolean.html\" title=\"struct kimchi::snarky::boolean::Boolean\">super::boolean::Boolean</a> snarky type has an out-of-circuit type of <a href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\" title=\"primitive bool\">bool</a>.</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.SIZE_IN_FIELD_ELEMENTS\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#142\">source</a><a href=\"#associatedconstant.SIZE_IN_FIELD_ELEMENTS\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedconstant.SIZE_IN_FIELD_ELEMENTS\" class=\"constant\">SIZE_IN_FIELD_ELEMENTS</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a> = _</h4></section></summary><div class='docblock'>The number of field elements that this type takes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_cvars\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#144-149\">source</a><a href=\"#method.to_cvars\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#tymethod.to_cvars\" class=\"fn\">to_cvars</a>(&amp;self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"kimchi/snarky/cvar/enum.FieldVar.html\" title=\"enum kimchi::snarky::cvar::FieldVar\">FieldVar</a>&lt;F&gt;&gt;, Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" title=\"type kimchi::snarky::snarky_type::SnarkyType::Auxiliary\">Auxiliary</a>)</h4></section></summary><div class='docblock'>Returns the circuit variables (and auxiliary data) behind this type.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_cvars_unsafe\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#151-159\">source</a><a href=\"#method.from_cvars_unsafe\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#tymethod.from_cvars_unsafe\" class=\"fn\">from_cvars_unsafe</a>(cvars: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"kimchi/snarky/cvar/enum.FieldVar.html\" title=\"enum kimchi::snarky::cvar::FieldVar\">FieldVar</a>&lt;F&gt;&gt;, aux: Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" title=\"type kimchi::snarky::snarky_type::SnarkyType::Auxiliary\">Auxiliary</a>) -&gt; Self</h4></section></summary><div class='docblock'>Creates a new instance of this type from the given circuit variables (And some auxiliary data).</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.check\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#161-165\">source</a><a href=\"#method.check\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#tymethod.check\" class=\"fn\">check</a>(\n    &amp;self,\n    cs: &amp;mut <a class=\"struct\" href=\"kimchi/snarky/runner/struct.RunState.html\" title=\"struct kimchi::snarky::runner::RunState\">RunState</a>&lt;F&gt;,\n    loc: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;\n) -&gt; <a class=\"type\" href=\"kimchi/snarky/errors/type.SnarkyResult.html\" title=\"type kimchi::snarky::errors::SnarkyResult\">SnarkyResult</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>&gt;</h4></section></summary><div class='docblock'>Checks that the circuit variables behind this type are valid.\nFor some definition of valid.\nFor example, a Boolean snarky type would check that the field element representing it is either 0 or 1.\nThe function does this by adding constraints to your constraint system.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.constraint_system_auxiliary\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#167-172\">source</a><a href=\"#method.constraint_system_auxiliary\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#tymethod.constraint_system_auxiliary\" class=\"fn\">constraint_system_auxiliary</a>() -&gt; Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" title=\"type kimchi::snarky::snarky_type::SnarkyType::Auxiliary\">Auxiliary</a></h4></section></summary><div class='docblock'>The “default” value of <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\">Self::Auxiliary</a>.\nThis is passed to <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#tymethod.from_cvars_unsafe\">Self::from_cvars_unsafe</a> when we are not generating a witness,\nsince we have no candidate value to get the auxiliary data from.\nNote that we use an explicit value here rather than Auxiliary: Default,\nsince the default value for the type may not match the default value we actually want to pass!</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.value_to_field_elements\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#174-179\">source</a><a href=\"#method.value_to_field_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#tymethod.value_to_field_elements\" class=\"fn\">value_to_field_elements</a>(\n    value: &amp;Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.OutOfCircuit\" title=\"type kimchi::snarky::snarky_type::SnarkyType::OutOfCircuit\">OutOfCircuit</a>\n) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;, Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" title=\"type kimchi::snarky::snarky_type::SnarkyType::Auxiliary\">Auxiliary</a>)</h4></section></summary><div class='docblock'>Converts an out-of-circuit value</div></details><section id=\"method.value_of_field_elements\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#181-188\">source</a><a href=\"#method.value_of_field_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#tymethod.value_of_field_elements\" class=\"fn\">value_of_field_elements</a>(\n    fields: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;,\n    aux: Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.Auxiliary\" title=\"type kimchi::snarky::snarky_type::SnarkyType::Auxiliary\">Auxiliary</a>\n) -&gt; Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.OutOfCircuit\" title=\"type kimchi::snarky::snarky_type::SnarkyType::OutOfCircuit\">OutOfCircuit</a></h4></section><section id=\"method.compute\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#68-77\">source</a><a href=\"#method.compute\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#method.compute\" class=\"fn\">compute</a>&lt;FUNC&gt;(\n    cs: &amp;mut <a class=\"struct\" href=\"kimchi/snarky/runner/struct.RunState.html\" title=\"struct kimchi::snarky::runner::RunState\">RunState</a>&lt;F&gt;,\n    loc: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'static, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a>&gt;,\n    to_compute_value: FUNC\n) -&gt; <a class=\"type\" href=\"kimchi/snarky/errors/type.SnarkyResult.html\" title=\"type kimchi::snarky::errors::SnarkyResult\">SnarkyResult</a>&lt;Self&gt;<div class=\"where\">where\n    FUNC: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&amp;dyn <a class=\"trait\" href=\"kimchi/snarky/runner/trait.WitnessGeneration.html\" title=\"trait kimchi::snarky::runner::WitnessGeneration\">WitnessGeneration</a>&lt;F&gt;) -&gt; Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.OutOfCircuit\" title=\"type kimchi::snarky::snarky_type::SnarkyType::OutOfCircuit\">OutOfCircuit</a>,</div></h4></section><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/kimchi/snarky/snarky_type.rs.html#79-86\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#method.read\" class=\"fn\">read</a>&lt;G&gt;(&amp;self, g: G) -&gt; Self::<a class=\"associatedtype\" href=\"kimchi/snarky/snarky_type/trait.SnarkyType.html#associatedtype.OutOfCircuit\" title=\"type kimchi::snarky::snarky_type::SnarkyType::OutOfCircuit\">OutOfCircuit</a><div class=\"where\">where\n    G: <a class=\"trait\" href=\"kimchi/snarky/runner/trait.WitnessGeneration.html\" title=\"trait kimchi::snarky::runner::WitnessGeneration\">WitnessGeneration</a>&lt;F&gt;,</div></h4></section></div></details>","SnarkyType<F>","kimchi::snarky::cvar::Term","kimchi::snarky::cvar::ScaledCVar"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()